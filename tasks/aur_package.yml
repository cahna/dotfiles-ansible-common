---
- name: AUR | get metadata from AurJson api
  uri: >
    url=https://aur.archlinux.org/rpc.php?type=info&arg={{ pkg_name | mandatory }}
    return_content=yes
    timeout=6
  register: api_info

- assert:
    that:
      - api_info.status == 200
      - api_info.json is defined
      - api_info.json.type == 'info'
      - api_info.json.resultcount == 1
      - api_info.json.results is defined

- name: AUR | rebuild tmp downloads folder
  file: >
    path=/tmp/aur
    state=directory
  register: aurdir

- name: AUR | {{ pkg_name }} | download tarball
  get_url: >
    url='https://aur.archlinux.org{{api_info.json.results.URLPath}}'
    dest='{{ aurdir.path }}'
  register: aur_tarball

- name: AUR | {{ pkg_name }} | extract tarball
  command: >
    tar zxvf {{ aur_tarball.dest | quote }}
    chdir='{{ aurdir.path }}'
    creates='{{ aur_tarball.dest | dirname }}/{{ pkg_name }}/PKGBUILD'
  register: extract_tarball_result

# This will break if run as root. Don't run as root, or add allowroot flag.
- name: AUR | {{ pkg_name }} | build package, including missing dependencies
  sudo: no
  command: >
    makepkg --noconfirm --noprogressbar -mfs
    chdir='{{ aurdir.path }}/{{ pkg_name }}'
  register: aur_makepkg_result

- shell: ls -1 {{ aurdir.path }}/{{ pkg_name }} | grep pkg.tar
  register: compiled_package_name

- name: AUR | {{ pkg_name }} | install newly-built aur package with pacman
  when: aur_makepkg_result | changed
  sudo: yes
  shell: >
    pacman --noconfirm --noprogressbar --needed -U {{ item | quote }}
    chdir='{{ aurdir.path }}/{{ pkg_name }}'
  with_items:
    - "{{ compiled_package_name.stdout }}"
  register: pacman_install_result
  changed_when: pacman_install_result.stdout is defined && pacman_install_result.stdout.find('there is nothing to do') == -1
